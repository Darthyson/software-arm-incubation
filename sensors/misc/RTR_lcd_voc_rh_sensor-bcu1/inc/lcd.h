#ifndef LCD_H_
#define LCD_H_

#include <u8g_arm.h>

extern u8g_t u8g;

extern uint8_t draw_state;

void u8g_prepare(void);
void u8g_box_frame(uint8_t a);
void u8g_string(uint8_t a);
void u8g_line(uint8_t a);
void u8g_ascii_1(void);
void u8g_ascii_2(void);
void draw(void);
void temperature_screen(void);
void draw_thermometer(void);
void draw_home_screen(void);
void lcdMenu(int channel, int val, uint8_t pressType);
void drawLCD(void);
void draw_menu(void);
void checkLCDperiodic(void);

struct lcd_object {
	bool object_active;
	char *object_address;
	uint8_t pos_x;
	uint8_t pos_y;
	uint8_t height;
	uint8_t width;
	uint8_t font_size;
	u8g_fntpgm_uint8_t font;
};

struct lcd_screen {
	lcd_object *screen_objects;
	bool screen_active;
};

//struct lcd_screen lcd_screens[2];

//uint8_t active_screen; // set the enumeration of shown screen

enum {
	HOMESCREEN, MENU
};


extern unsigned int LCDBrightness;

extern bool KeyPressedFlag;
extern bool BacklightOnFlag;


struct lcd_home_screen {
	bool show_window_state;	//0=off, 1=on
	bool window_state;		//0=closed, 1=open
	bool show_ventilation_state; //0=off, 1=on
	char ventilation_level; //actual level of room ventilation
};

extern struct lcd_home_screen window_ventilation;

#define luefter_width 15
#define luefter_height 13
static const unsigned char luefter_bits[] U8G_PROGMEM = { 0x40, 0x00, 0xe0, 0x00, 0xe0, 0x01, 0xe0, 0x01, 0xe0, 0x01, 0xc0,
		0x01, 0xc0, 0x00, 0x70, 0x00, 0xfc, 0x1f, 0x9e, 0x3f, 0x1f, 0x7f, 0x0f, 0x3e, 0x06, 0x00 };

#define snowflake_width 14
#define snowflake_height 15
static const unsigned char snowflake_bits[] = { 0x20, 0x01, 0xf0, 0x03, 0xe4, 0x09, 0xc6, 0x18, 0xcc, 0x0c, 0xdf, 0x3e, 0xff,
		0x3f, 0xe0, 0x01, 0xf0, 0x03, 0xff, 0x3f, 0xce, 0x1c, 0xcc, 0x0c, 0xc4, 0x08, 0xe0, 0x01, 0x20, 0x01 };

////Thermometer bitmap (source: https://github.com/basvdijk/arduino-weather/blob/master/arduino-weather.ino)
//#define temperature_width 18
//#define temperature_height 47
//static unsigned char temperature_bits[] U8G_PROGMEM = { 0xc0, 0x0f, 0x00, 0xe0, 0x1f, 0x00, 0x70, 0x38, 0x00, 0x30,
//		0x30, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00, 0xb0,
//		0x37, 0x00, 0xb0, 0x37, 0x00, 0x30, 0x30, 0x00, 0xb0, 0x37, 0x00, 0xb0, 0x37, 0x00, 0x30, 0x30, 0x00, 0x30,
//		0x30, 0x00, 0xb0, 0x37, 0x00, 0xb0, 0x37, 0x00, 0x30, 0x30, 0x00, 0xb0, 0x37, 0x00, 0xb0, 0x37, 0x00, 0xb0,
//		0x37, 0x00, 0x30, 0x30, 0x00, 0xb0, 0x37, 0x00, 0xb0, 0x37, 0x00, 0xb0, 0x37, 0x00, 0xb0, 0x37, 0x00, 0xb0,
//		0x37, 0x00, 0xb0, 0x37, 0x00, 0xb0, 0x37, 0x00, 0x98, 0x67, 0x00, 0x8c, 0xc7, 0x00, 0xc6, 0x8f, 0x01, 0xe2,
//		0x1f, 0x01, 0xf3, 0x3f, 0x03, 0xf3, 0x3f, 0x03, 0xf3, 0x3f, 0x03, 0xf3, 0x3f, 0x03, 0xf3, 0x3f, 0x03, 0xf3,
//		0x3f, 0x03, 0xf3, 0x3f, 0x03, 0xe6, 0x9f, 0x01, 0xc6, 0x8f, 0x01, 0x0c, 0xc0, 0x00, 0x38, 0x70, 0x00, 0xf0,
//		0x3f, 0x00, 0xc0, 0x0f, 0x00 };

#define window_open_width 17
#define window_open_height 13
static const unsigned char window_open_bits[] = { 0xf0, 0x1f, 0x00, 0x1f, 0xf0, 0x01, 0x11, 0x10, 0x01, 0x11, 0x10, 0x01, 0x1f,
		0xf0, 0x01, 0x11, 0x10, 0x01, 0x11, 0x10, 0x01, 0x11, 0x10, 0x01, 0x11, 0x10, 0x01, 0x11, 0x10, 0x01, 0x1f,
		0xf0, 0x01, 0xf0, 0x1f, 0x00, 0xf8, 0x3f, 0x00 };

#define window_closed_width 11
#define window_closed_height 13
static const unsigned char window_closed_bits[] = {
   0xfe, 0x03, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0xfe, 0x03, 0x22, 0x02,
   0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0xfe, 0x03,
   0xff, 0x07 };

#define heating_width 14
#define heating_height 13
static const unsigned char heating_bits[] = {
   0x84, 0x10, 0xc6, 0x18, 0x63, 0x0c, 0x63, 0x0c, 0x63, 0x0c, 0xc6, 0x18,
   0xc6, 0x18, 0xc6, 0x18, 0x8c, 0x31, 0x8c, 0x31, 0x8c, 0x31, 0xc6, 0x18,
   0xc6, 0x18 };

#define degree_width 11
#define degree_height 11
static const unsigned char degree_bits[] = {
   0x70, 0x00, 0xfc, 0x01, 0xfe, 0x03, 0x8e, 0x03, 0x07, 0x07, 0x07, 0x07,
   0x07, 0x07, 0x8e, 0x03, 0xfe, 0x03, 0xfc, 0x01, 0x70, 0x00 };

//#define thumb_up_width 33
//#define thumb_up_height 29
//static const unsigned char thumb_up_bits[] = {
//   0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 0x20,
//   0x04, 0x00, 0x00, 0x00, 0x20, 0x0c, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00,
//   0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00,
//   0x30, 0x08, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x18, 0x08,
//   0x00, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x04, 0xf8, 0x7f, 0x00,
//   0x00, 0x06, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0xff, 0x01,
//   0x00, 0x80, 0x01, 0x41, 0x00, 0x00, 0xc0, 0x00, 0x41, 0x00, 0x00, 0xfc,
//   0x00, 0x41, 0x00, 0x00, 0xc0, 0x00, 0x41, 0x00, 0x00, 0x80, 0x00, 0x41,
//   0x00, 0x00, 0xc0, 0x00, 0x41, 0x00, 0x00, 0xf8, 0x00, 0x41, 0x00, 0x00,
//   0x60, 0x00, 0x41, 0x00, 0x00, 0x40, 0x00, 0x41, 0x00, 0x00, 0x60, 0x00,
//   0x41, 0x00, 0x00, 0x78, 0x00, 0x41, 0x00, 0x00, 0x20, 0x00, 0x41, 0x00,
//   0x00, 0x20, 0x00, 0xc1, 0x07, 0x00, 0x38, 0x00, 0x7f, 0xfc, 0xff, 0x0f,
//   0x00 };
//
//#define thumb_side_width 29
//#define thumb_side_height 33
//static const unsigned char thumb_side_bits[] = {
//   0x00, 0x60, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x98, 0xfb, 0x01,
//   0x00, 0x08, 0xb1, 0x0f, 0x00, 0x08, 0x11, 0x09, 0x00, 0x08, 0x11, 0x19,
//   0x00, 0x08, 0x01, 0x10, 0x00, 0x08, 0x00, 0x10, 0x00, 0x08, 0x00, 0x10,
//   0x00, 0x08, 0x00, 0x10, 0x00, 0x08, 0x00, 0x10, 0x00, 0x08, 0x00, 0x10,
//   0x00, 0x08, 0x00, 0x10, 0xf8, 0x0f, 0x00, 0x10, 0x0e, 0x00, 0x00, 0x10,
//   0x03, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x10,
//   0x03, 0x00, 0x00, 0x10, 0xfe, 0x00, 0x00, 0x10, 0x80, 0x03, 0x00, 0x10,
//   0x00, 0x06, 0x00, 0x10, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x30, 0x00, 0x08,
//   0x00, 0x60, 0x00, 0x08, 0x00, 0x40, 0x00, 0x08, 0x00, 0xc0, 0xff, 0x1f,
//   0x00, 0x40, 0x00, 0x10, 0x00, 0x40, 0x00, 0x10, 0x00, 0x40, 0x00, 0x10,
//   0x00, 0x40, 0x00, 0x10, 0x00, 0x40, 0x00, 0x10, 0x00, 0xc0, 0xff, 0x1f };

#define smily_base_width 32
#define smily_base_height 32
static const unsigned char smily_base_bits[] = {
   0x00, 0xf0, 0x0f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x1f, 0xf0, 0x01,
   0xc0, 0x03, 0xc0, 0x03, 0xe0, 0x00, 0x00, 0x07, 0x70, 0x00, 0x00, 0x0e,
   0x38, 0x00, 0x00, 0x1c, 0x18, 0x00, 0x00, 0x38, 0x0c, 0x00, 0x00, 0x30,
   0x0c, 0x1e, 0x78, 0x70, 0x06, 0x1e, 0x78, 0x60, 0x06, 0x1e, 0x78, 0x60,
   0x07, 0x1e, 0x78, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0,
   0x03, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0,
   0x03, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x00, 0x60,
   0x06, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x70, 0x0c, 0x00, 0x00, 0x30,
   0x18, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x1c, 0x70, 0x00, 0x00, 0x0e,
   0xe0, 0x00, 0x00, 0x07, 0xc0, 0x03, 0xc0, 0x03, 0x00, 0x1f, 0xf0, 0x01,
   0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf0, 0x0f, 0x00 };

//muss 7 weiter rechts und 17 weiter unten anfangen
#define mouth_happy_width 18
#define mouth_happy_height 9
static const unsigned char mouth_happy_bits[] = {
   0x01, 0x00, 0x02, 0x01, 0x00, 0x02, 0x03, 0x00, 0x03, 0x02, 0x00, 0x01,
   0x06, 0x80, 0x01, 0x1c, 0xe0, 0x00, 0x78, 0x78, 0x00, 0xf0, 0x3f, 0x00,
   0xc0, 0x0f, 0x00 };

// muss 8 weiter rechts und 21 weiter unten anfangen
#define mouth_neutral_width 16
#define mouth_neutral_height 2
static const unsigned char mouth_neutral_bits[] = {
   0xff, 0xff, 0xff, 0xff };

// muss 7 weiter rechts und 16 weiter unten anfangen
#define mouth_sad_width 18
#define mouth_sad_height 9
static const unsigned char mouth_sad_bits[] = {
   0xc0, 0x0f, 0x00, 0xf0, 0x3f, 0x00, 0x78, 0x78, 0x00, 0x1c, 0xe0, 0x00,
   0x06, 0x80, 0x01, 0x02, 0x00, 0x01, 0x03, 0x00, 0x03, 0x01, 0x00, 0x02,
   0x01, 0x00, 0x02 };

//struct lcd_page

#endif
