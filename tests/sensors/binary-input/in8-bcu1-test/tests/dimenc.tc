name           = "input_as_dim_encoder"
description    = "IN8 - Dim Encoder"
device_spec    = "Jung_2118_dim_enc_config.device"
power_on_delay = device.ms ("bus_return_delay_base")
tags           = "APP", "IN8", "DIMENC"

### the actual test function starts here
Section          ("check bus return telegram")
App_Loop         ()
Send_Telegram    (device.com_object [0], device.channel [1].value_rising_edge, comment = "Bus return action for channel 1")
Send_Telegram    (device.com_object [1], device.channel [2].value_falling_edge, comment = "Bus return action for channel 2")
Send_Telegram    (device.com_object [2], device.channel [3].value_falling_edge, comment = "Bus return action for channel 3")

all = True

if 0 or all :
    ### channel 1 Send value on rising edge
    channel     = 1
    channel_cfg = device.channel    [channel]
    obj         = device.com_object [channel - 1]
    Section          ("Channel 1 sends at rising edge")
    for i in 1, 2 :
        App_Loop         ("_input%dSet" % (channel, ), comment = "Rising edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        Send_Telegram    (obj, channel_cfg.value_rising_edge, comment = "After debounce set value")
        Progress_Time    (100)
        App_Loop         ()
        App_Loop         ()
        Progress_Time    (5000, comment = "Long time press -> should not change the value")
        App_Loop         ()
        App_Loop         ()
        App_Loop         ("_input%dClear" % (channel, ), comment = "Falling edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         ()
        App_Loop         ()

if 0 or all :
    ### channel 2 Send value on falling edge
    channel     = 2
    channel_cfg = device.channel    [channel]
    obj         = device.com_object [channel - 1]
    Section          ("Channel 2 sends at falling edge")
    for i in 1, 2 :
        App_Loop         ("_input%dSet" % (channel, ), comment = "Rising edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         ()
        App_Loop         ()
        Progress_Time    (5000)
        App_Loop         ()
        App_Loop         ()
        App_Loop         ("_input%dClear" % (channel, ), comment = "Falling edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        Send_Telegram    (obj, channel_cfg.value_falling_edge, comment = "After debounce set value")
        App_Loop         ()
        App_Loop         ()

if 0 or all :
    ### channel 3 Send value on both edges
    channel     = 3
    channel_cfg = device.channel    [channel]
    obj         = device.com_object [channel - 1]
    Section          ("Channel 3 sends at both edges")
    for i in 1, 2 :
        App_Loop         ("_input%dSet" % (channel, ), comment = "Rising edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        Send_Telegram    (obj, channel_cfg.value_rising_edge, comment = "After debounce set value")
        Progress_Time    (5000)
        App_Loop         ()
        App_Loop         ()
        App_Loop         ("_input%dClear" % (channel, ), comment = "Falling edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        Send_Telegram    (obj, channel_cfg.value_falling_edge, comment = "After debounce set value")
        App_Loop         ()
        App_Loop         ()

if 0 or all :
    ### channel 4 Send value on rising edge
    channel     = 4
    channel_cfg = device.channel    [channel]
    obj         = device.com_object [channel - 1]
    value       = channel_cfg.value_rising_edge

    step        = channel_cfg.change_step

    for cond in "value > 0", "value < 255", "value > 200" :
        step       *= -1
        Section          ("Channel 4 sends at rising edge")
        App_Loop         ("_input%dSet" % (channel, ), comment = "Rising edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        value_c = min (max (0, value), 255)
        Send_Telegram    (obj, value_c, comment = "After debounce set value")

        value += step
        Progress_Time    (5000, comment = "Long time press -> should not change the value")
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        value_c = min (max (0, value), 255)
        Send_Telegram    (obj, value_c, comment = "After debounce set value")

        while eval (cond) :
            value += step
            Progress_Time    ( channel_cfg.ms ("time_between_two_telegrams_base")
                             , comment = "Long time press -> should change the value"
                             )
            App_Loop         (comment = "One additional loop to put the telegram into the queue")
            value_c = min (max (0, value), 255)
            Send_Telegram    (obj, value_c, comment = "After debounce set value")

        if (value < 0) or (value > 255) :
            Progress_Time    ( channel_cfg.ms ("time_between_two_telegrams_base")
                             , comment = "Long time press -> should not change the value"
                             )
            App_Loop         ()
            App_Loop         (comment = "We are already ouside the limits 0-255, therefore no further telegram")

        App_Loop         ("_input%dClear" % (channel, ), comment = "Falling edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         ()
        App_Loop         ()

if 0 or all :
    ### channel 5 Send value on falling edge
    channel     = 5
    channel_cfg = device.channel    [channel]
    obj         = device.com_object [channel - 1]
    value       = channel_cfg.value_falling_edge
    step        = channel_cfg.change_step

    for cond in "value > 0", "value < 255", "value > 200" :
        step       *= -1
        Section          ("Channel 5 sends at falling edge")
        App_Loop         ("_input%dSet" % (channel, ), comment = "Rising edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         ()
        App_Loop         ()
        App_Loop         ()

        value += step
        Progress_Time    (5000, comment = "Long time press -> should not change the value")
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        value_c = min (max (0, value), 255)
        Send_Telegram    (obj, value_c, comment = "After debounce set value")

        while eval (cond) :
            value += step
            Progress_Time    ( channel_cfg.ms ("time_between_two_telegrams_base")
                             , comment = "Long time press -> should change the value"
                             )
            App_Loop         (comment = "One additional loop to put the telegram into the queue")
            value_c = min (max (0, value), 255)
            Send_Telegram    (obj, value_c, comment = "After debounce set value")

        if (value < 0) or (value > 255) :
            Progress_Time    ( channel_cfg.ms ("time_between_two_telegrams_base")
                             , comment = "Long time press -> should not change the value"
                             )
            App_Loop         ()
            App_Loop         (comment = "We are already ouside the limits 0-255, therefore no further telegram")

        App_Loop         ("_input%dClear" % (channel, ), comment = "Falling edge on channel %d" % (channel, ))
        Progress_Time    (10)
        App_Loop         (comment = "One additional loop to put the telegram into the queue")
        Send_Telegram    (obj, value_c, comment = "After debounce set value")
        App_Loop         ()
        App_Loop         ()
